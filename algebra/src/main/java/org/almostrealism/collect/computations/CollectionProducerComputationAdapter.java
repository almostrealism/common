/*
 * Copyright 2024 Michael Murray
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.almostrealism.collect.computations;

import io.almostrealism.collect.CollectionExpression;
import io.almostrealism.collect.TraversableExpression;
import io.almostrealism.compute.Process;
import io.almostrealism.kernel.KernelIndex;
import io.almostrealism.kernel.KernelStructureContext;
import io.almostrealism.relation.Computable;
import io.almostrealism.relation.Countable;
import io.almostrealism.relation.Producer;
import io.almostrealism.scope.ArrayVariable;
import io.almostrealism.expression.Expression;
import io.almostrealism.scope.Scope;
import io.almostrealism.relation.Evaluable;
import io.almostrealism.scope.ScopeSettings;
import org.almostrealism.collect.CollectionProducer;
import org.almostrealism.collect.PackedCollection;
import io.almostrealism.collect.TraversalPolicy;
import org.almostrealism.hardware.MemoryDataComputation;

import java.util.List;
import java.util.Optional;
import java.util.function.Function;
import java.util.function.Supplier;

public abstract class CollectionProducerComputationAdapter<I extends PackedCollection<?>, O extends PackedCollection<?>>
		extends CollectionProducerComputationBase<I, O>
		implements TraversableExpression<Double> {

	public CollectionProducerComputationAdapter(String name, TraversalPolicy outputShape,
												Supplier<Evaluable<? extends I>>... arguments) {
		super(name, outputShape, arguments);
	}

	/**
	 * True if this {@link io.almostrealism.code.Computation} should generate
	 * {@link io.almostrealism.code.ExpressionAssignment} statements that use
	 * relative {@link ArrayVariable} positions, false otherwise. When relative
	 * positions are used, the compiled program can have greater flexibility in
	 * how statements behave when used with arguments of varying size. However,
	 * the drawback is that this requires the parallelism implied by the
	 * {@link TraversalPolicy} returned via {@link #getShape()} is identical
	 * to the actual parallelism of the compiled
	 * {@link io.almostrealism.code.Computation}.
	 *
	 * @see  Countable#getCount()
	 * @see  TraversalPolicy#getSize()
	 * @see  MemoryDataComputation#getMemLength()
	 * @see  ArrayVariable#referenceRelative(Expression, KernelIndex)
	 */
	protected boolean isOutputRelative() { return true; }

	/**
	 * The expected number of {@link io.almostrealism.code.ExpressionAssignment}
	 * statements that will be included in the {@link Scope} generated by this
	 * {@link io.almostrealism.code.Computation}. This will either be the size of
	 * the {@link TraversalPolicy} returned by {@link #getShape()}, or 1 if
	 * relative output is not used. Note that the resulting {@link Scope} may not
	 * always adhere to this count if the {@link KernelStructureContext} indicates
	 * that the {@link Scope} is intended to become part of a larger program that
	 * expects a different size.
	 *
	 * @see  #isOutputRelative()
	 * @see  KernelStructureContext#getKernelMaximum()
	 */
	@Override
	public int getMemLength() { return isOutputRelative() ? super.getMemLength() : 1; }

	@Override
	public long getCountLong() {
		return isOutputRelative() ? super.getCountLong() : getShape().getTotalSizeLong();
	}

	/**
	 * The actual number of {@link io.almostrealism.code.ExpressionAssignment}
	 * statements that will be included in the {@link Scope} generated by this
	 * {@link io.almostrealism.code.Computation}. This will either be the size of
	 * the value returned by {@link #getMemLength()}, or the size of the
	 * {@link TraversalPolicy} returned by {@link #getShape()} if the provided
	 * {@link KernelStructureContext} has a kernel maximum that is not equal to
	 * the value returned by {@link #getCountLong()}.
	 *
	 * @see  #getCountLong()
	 * @see  KernelStructureContext#getKernelMaximum()
	 */
	protected int getStatementCount(KernelStructureContext context) {
		if (context.getKernelMaximum().orElse(0) != getCountLong()) {
			return getShape().getSize();
		}

		return getMemLength();
	}

	@Override
	public Scope<O> getScope(KernelStructureContext context) {
		Scope<O> scope = super.getScope(context);
		ArrayVariable<Double> output = (ArrayVariable<Double>) getOutputVariable();

		int statementCount = getStatementCount(context);
		boolean relativeOutput = isOutputRelative() || statementCount != getMemLength();

		for (int i = 0; i < statementCount; i++) {
			KernelIndex kernelIndex = new KernelIndex(context);
			Expression index = kernelIndex;
			if (statementCount > 1) index = index.multiply(statementCount).add(i);

			if (relativeOutput) {
				scope.getStatements().add(output.referenceRelative(e(i), kernelIndex).assign(getValueAt(index)));
			} else {
				scope.getStatements().add(output.referenceAbsolute(kernelIndex).assign(getValueAt(index)));
			}
		}

		return scope;
	}

	@Override
	public Expression<Double> getValue(Expression... pos) {
		return getValueAt(getShape().index(pos));
	}

	@Override
	public boolean isDiagonal(int width) {
		if (getShape().getTotalSizeLong() == 1) return true;
		return TraversableExpression.super.isDiagonal(width);
	}

	@Override
	public Optional<Computable> getDiagonalScalar(int width) {
		if (getShape().getTotalSizeLong() == 1) return Optional.of(this);
		return TraversableExpression.super.getDiagonalScalar(width);
	}

	@Override
	public Process<Process<?, ?>, Evaluable<? extends O>> isolate() {
		if (getMemLength() > ScopeSettings.maxStatements) {
			warn("Cannot isolate a ProducerComputation which would produce a Scope with "
					+ getMemLength() + " statements");
			return this;
		}

		return super.isolate();
	}

	@Override
	public CollectionProducer<O> delta(Producer<?> target) {
		CollectionProducer<O> delta = attemptDelta(target);
		if (delta != null) return delta;

		delta = TraversableDeltaComputation.create("delta", getShape(), shape(target),
				args -> CollectionExpression.create(getShape(), idx -> args[1].getValueAt(idx)), target,
				(Supplier) this)
				.setDescription((Function<List<String>, String>) args -> "delta(" + description(args) + ")");
		return delta;
	}

	@Override
	public RepeatedProducerComputationAdapter<O> toRepeated() {
		RepeatedProducerComputationAdapter result = new RepeatedProducerComputationAdapter<>(getShape(), this,
				getInputs().stream().skip(1).toArray(Supplier[]::new));
		result.addDependentLifecycle(this);
		return result;
	}
}
