/*
 * Copyright 2018 Michael Murray
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.almostrealism.graph.io;

import java.beans.XMLEncoder;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Date;

import org.almostrealism.algebra.Vector;
import org.almostrealism.color.Light;
import org.almostrealism.graph.Mesh;
import org.almostrealism.graph.Triangle;
import org.almostrealism.space.AbstractSurface;
import org.almostrealism.space.Plane;
import org.almostrealism.space.Scene;
import org.almostrealism.space.ShadableSurface;

import com.almostrealism.lighting.AmbientLight;
import com.almostrealism.lighting.DirectionalAmbientLight;
import com.almostrealism.lighting.PointLight;
import com.almostrealism.lighting.RectangularLight;
import com.almostrealism.lighting.SphericalLight;
import com.almostrealism.projection.PinholeCamera;
import com.almostrealism.projection.ThinLensCamera;
import com.almostrealism.raytracer.Settings;
import com.almostrealism.raytracer.primitives.Cone;
import com.almostrealism.raytracer.primitives.Cylinder;
import com.almostrealism.raytracer.primitives.Polynomial;
import com.almostrealism.raytracer.primitives.Sphere;

// TODO  Add GIF encoding.
// TODO  Add GTS and RAW encoding.

/**
 * The FileEncoder class provides static methods for encoding Scene and Surface objects
 * and storing them in local files.
 */
public class FileEncoder {

  /** The integer code for an XML encoding. */
  public static final int XMLEncoding = 2;
  
  /** The integer code for a GTS encoding. */
  public static final int GTSEncoding = 3;
  
  /**
	 * Encodes the specified Scene object using the encoding specified by the integer encoding code
	 * and saves the encoded data in the file represented by the specified File object.
	 * If the encoding code is not recognized, the method returns.
	 */
	public static void encodeSceneFile(Scene scene, File file, int encoding) throws IOException {
		if (file.exists() != true) {
			if (!file.createNewFile()) {
				System.out.println("FileEncoder: Unable to create " + file);
				return;
			}
		}
		
		FileOutputStream fileOut = new FileOutputStream(file);
		
		if (encoding == FileEncoder.XMLEncoding) {
			try (XMLEncoder encoder = new XMLEncoder(fileOut)) {
				FileEncoder.configureEncoder(encoder);
				encoder.writeObject(scene);
			}
		}
	}
	
	/**
	 * Encodes the specified Surface object using the encoding specified by the integer encoding code
	 * and saves the encoded data in the file represented by the specified File object.
	 * If the encoding code is not recognized, the method returns.
	 */
	public static void encodeSurfaceFile(ShadableSurface surface, File file, int encoding) throws IOException {
		if (file.exists() != true) {
			file.createNewFile();
		}
		
		FileOutputStream fileOut = new FileOutputStream(file);
		
		if (encoding == FileEncoder.XMLEncoding) {
			try (XMLEncoder encoder = new XMLEncoder(fileOut)) {
				FileEncoder.configureEncoder(encoder);
				encoder.writeObject(surface);
			}
		} else if (encoding == FileEncoder.GTSEncoding) {
			Mesh m = null;
			
			if (surface instanceof AbstractSurface)
				m = ((AbstractSurface)surface).triangulate();
			else
				return;
			
			Vector v[] = m.getVectors();
			Triangle t[] = m.getTriangles();
			
			try (PrintStream p = new PrintStream(fileOut)) {
				// TODO  Extract the version number from the pom file and include it in this comment
				p.println("# GTS output generated by Almost Realism Common Library (almostrealism.org)");
				p.println("# " + new Date());
				p.println(v.length + " " + 3 * t.length + " " + t.length);
				
				for (int i = 0; i < v.length; i++) {
					p.println(v[i].getX() + " " + v[i].getY() + " " + v[i].getZ());
				}
				
				for (int i = 0; i < t.length; i++) {
					Vector tv[] = t[i].getVertices();
					p.println(m.indexOf(tv[0]) + " " + m.indexOf(tv[1]));
					p.println(m.indexOf(tv[1]) + " " + m.indexOf(tv[2]));
					p.println(m.indexOf(tv[2]) + " " + m.indexOf(tv[0]));
				}
				
				int j = 0;
				for (int i = 0; i < t.length; i++) p.println(j++ + " " + j++ + " " + j++);
			}
		}
	}
	
	private static void configureEncoder(XMLEncoder encoder) {
		encoder.setPersistenceDelegate(PinholeCamera.class, new CameraPersistenceDelegate());
		encoder.setPersistenceDelegate(ThinLensCamera.class, new CameraPersistenceDelegate());
		
		encoder.setPersistenceDelegate(AbstractSurface.class, new SurfacePersistenceDelegate());
		encoder.setPersistenceDelegate(Sphere.class, new SurfacePersistenceDelegate());
		encoder.setPersistenceDelegate(Cylinder.class, new SurfacePersistenceDelegate());
		encoder.setPersistenceDelegate(Cone.class, new SurfacePersistenceDelegate());
		encoder.setPersistenceDelegate(Plane.class, new SurfacePersistenceDelegate());
		encoder.setPersistenceDelegate(Polynomial.class, new SurfacePersistenceDelegate());
		encoder.setPersistenceDelegate(Triangle.class, new SurfacePersistenceDelegate());
		encoder.setPersistenceDelegate(Mesh.class, new SurfacePersistenceDelegate());
//		encoder.setPersistenceDelegate(AbstractSurfaceUI.class, new SurfacePersistenceDelegate());
//		encoder.setPersistenceDelegate(SurfaceUIFactory.SurfaceUIImpl.class, new SurfacePersistenceDelegate());
		
		encoder.setPersistenceDelegate(Light.class, new LightPersistenceDelegate());
		encoder.setPersistenceDelegate(AmbientLight.class, new LightPersistenceDelegate());
		encoder.setPersistenceDelegate(DirectionalAmbientLight.class, new LightPersistenceDelegate());
		encoder.setPersistenceDelegate(PointLight.class, new LightPersistenceDelegate());
		encoder.setPersistenceDelegate(SphericalLight.class, new LightPersistenceDelegate());
		encoder.setPersistenceDelegate(RectangularLight.class, new LightPersistenceDelegate());
	}
}
